arguments: src/align_dataset_mtcnn.py Dataset/FaceData/raw Dataset/FaceData/processed --image_size 160 --margin 32 --random_order --gpu_memory_fraction 0.25
--------------------
tensorflow version: 1.15.0
--------------------
git hash: b'eb5b26bc7983f51a90fd43e9413dc038d4cd952a'
--------------------
b'diff --git a/Dataset/Facedata/raw/HoangVanThu/156d1b8345c3b49dedd210.jpg b/Dataset/Facedata/raw/HoangVanThu/156d1b8345c3b49dedd210.jpg\nnew file mode 100644\nindex 0000000..15574cb\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/156d1b8345c3b49dedd210.jpg differ\ndiff --git a/Dataset/Facedata/raw/HoangVanThu/1cb76b8e36cec7909edf3.jpg b/Dataset/Facedata/raw/HoangVanThu/1cb76b8e36cec7909edf3.jpg\nnew file mode 100644\nindex 0000000..b29b802\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/1cb76b8e36cec7909edf3.jpg differ\ndiff --git a/Dataset/Facedata/raw/HoangVanThu/2be6eaddb79d46c31f8c2.jpg b/Dataset/Facedata/raw/HoangVanThu/2be6eaddb79d46c31f8c2.jpg\nnew file mode 100644\nindex 0000000..0b5e7c4\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/2be6eaddb79d46c31f8c2.jpg differ\ndiff --git a/Dataset/Facedata/raw/HoangVanThu/33bc9e44c004315a681515.jpg b/Dataset/Facedata/raw/HoangVanThu/33bc9e44c004315a681515.jpg\nnew file mode 100644\nindex 0000000..95631f8\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/33bc9e44c004315a681515.jpg differ\ndiff --git a/Dataset/Facedata/raw/HoangVanThu/396910954ed5bf8be6c414.jpg b/Dataset/Facedata/raw/HoangVanThu/396910954ed5bf8be6c414.jpg\nnew file mode 100644\nindex 0000000..d0bd6ee\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/396910954ed5bf8be6c414.jpg differ\ndiff --git a/Dataset/Facedata/raw/HoangVanThu/39bdbb48e50814564d1916.jpg b/Dataset/Facedata/raw/HoangVanThu/39bdbb48e50814564d1916.jpg\nnew file mode 100644\nindex 0000000..8b33036\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/39bdbb48e50814564d1916.jpg differ\ndiff --git a/Dataset/Facedata/raw/HoangVanThu/4eb234576a179b49c20612.jpg b/Dataset/Facedata/raw/HoangVanThu/4eb234576a179b49c20612.jpg\nnew file mode 100644\nindex 0000000..7bfa80e\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/4eb234576a179b49c20612.jpg differ\ndiff --git a/Dataset/Facedata/raw/HoangVanThu/51cba32cfd6c0c32557d11.jpg b/Dataset/Facedata/raw/HoangVanThu/51cba32cfd6c0c32557d11.jpg\nnew file mode 100644\nindex 0000000..eb25ad5\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/51cba32cfd6c0c32557d11.jpg differ\ndiff --git a/Dataset/Facedata/raw/HoangVanThu/56810e5c501ca142f80d21.jpg b/Dataset/Facedata/raw/HoangVanThu/56810e5c501ca142f80d21.jpg\nnew file mode 100644\nindex 0000000..ea14157\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/56810e5c501ca142f80d21.jpg differ\ndiff --git a/Dataset/Facedata/raw/HoangVanThu/633d401e1d5eec00b54f1.jpg b/Dataset/Facedata/raw/HoangVanThu/633d401e1d5eec00b54f1.jpg\nnew file mode 100644\nindex 0000000..a1ba925\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/633d401e1d5eec00b54f1.jpg differ\ndiff --git a/Dataset/Facedata/raw/HoangVanThu/7648608f3ecfcf9196de18.jpg b/Dataset/Facedata/raw/HoangVanThu/7648608f3ecfcf9196de18.jpg\nnew file mode 100644\nindex 0000000..266c7e1\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/7648608f3ecfcf9196de18.jpg differ\ndiff --git a/Dataset/Facedata/raw/HoangVanThu/7859e4bbbafb4ba512ea13.jpg b/Dataset/Facedata/raw/HoangVanThu/7859e4bbbafb4ba512ea13.jpg\nnew file mode 100644\nindex 0000000..594a5eb\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/7859e4bbbafb4ba512ea13.jpg differ\ndiff --git a/Dataset/Facedata/raw/HoangVanThu/7fccfbcda68d57d30e9c5.jpg b/Dataset/Facedata/raw/HoangVanThu/7fccfbcda68d57d30e9c5.jpg\nnew file mode 100644\nindex 0000000..78a789f\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/7fccfbcda68d57d30e9c5.jpg differ\ndiff --git a/Dataset/Facedata/raw/HoangVanThu/b52a17304a70bb2ee2617.jpg b/Dataset/Facedata/raw/HoangVanThu/b52a17304a70bb2ee2617.jpg\nnew file mode 100644\nindex 0000000..b4634f7\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/b52a17304a70bb2ee2617.jpg differ\ndiff --git a/Dataset/Facedata/raw/HoangVanThu/bc44cd8493c4629a3bd520.jpg b/Dataset/Facedata/raw/HoangVanThu/bc44cd8493c4629a3bd520.jpg\nnew file mode 100644\nindex 0000000..cf0cd84\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/bc44cd8493c4629a3bd520.jpg differ\ndiff --git a/Dataset/Facedata/raw/HoangVanThu/c70f941cc95c3802614d8.jpg b/Dataset/Facedata/raw/HoangVanThu/c70f941cc95c3802614d8.jpg\nnew file mode 100644\nindex 0000000..1de4e60\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/c70f941cc95c3802614d8.jpg differ\ndiff --git a/Dataset/Facedata/raw/HoangVanThu/cc8ccc9d91dd608339cc9.jpg b/Dataset/Facedata/raw/HoangVanThu/cc8ccc9d91dd608339cc9.jpg\nnew file mode 100644\nindex 0000000..7f253d3\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/cc8ccc9d91dd608339cc9.jpg differ\ndiff --git a/Dataset/Facedata/raw/HoangVanThu/da91f58fa8cf599100de6.jpg b/Dataset/Facedata/raw/HoangVanThu/da91f58fa8cf599100de6.jpg\nnew file mode 100644\nindex 0000000..7c09e5e\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/da91f58fa8cf599100de6.jpg differ\ndiff --git a/Dataset/Facedata/raw/HoangVanThu/e1a3ae95f3d5028b5bc44.jpg b/Dataset/Facedata/raw/HoangVanThu/e1a3ae95f3d5028b5bc44.jpg\nnew file mode 100644\nindex 0000000..051a7d5\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/e1a3ae95f3d5028b5bc44.jpg differ\ndiff --git a/Dataset/Facedata/raw/HoangVanThu/ee78f4b2aaf25bac02e317.jpg b/Dataset/Facedata/raw/HoangVanThu/ee78f4b2aaf25bac02e317.jpg\nnew file mode 100644\nindex 0000000..5f715c8\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/ee78f4b2aaf25bac02e317.jpg differ\ndiff --git a/Dataset/Facedata/raw/HoangVanThu/f2bd437e1d3eec60b52f19.jpg b/Dataset/Facedata/raw/HoangVanThu/f2bd437e1d3eec60b52f19.jpg\nnew file mode 100644\nindex 0000000..baa9a59\nBinary files /dev/null and b/Dataset/Facedata/raw/HoangVanThu/f2bd437e1d3eec60b52f19.jpg differ\ndiff --git a/Models/facemodel.pkl b/Models/facemodel.pkl\nnew file mode 100644\nindex 0000000..715aad3\nBinary files /dev/null and b/Models/facemodel.pkl differ\ndiff --git a/requirements.txt b/requirements.txt\nindex d16ee22..facfb13 100644\n--- a/requirements.txt\n+++ b/requirements.txt\n@@ -1,9 +1,6 @@\n-tensorflow>=1.12.1\n scipy==1.1.0\n scikit-learn\n-opencv-python\n h5py\n-matplotlib\n Pillow\n requests\n psutil\ndiff --git a/src/Sever.py b/src/Sever.py\nnew file mode 100644\nindex 0000000..9e7a9b6\n--- /dev/null\n+++ b/src/Sever.py\n@@ -0,0 +1,10 @@\n+from flask import Flask, jsonify\n+import pandas as pd\n+\n+app = Flask(__name__)\n+\n+\n+data = pd.read_csv(\'Attendance.csv\')\n+\n+print(data)\n+\ndiff --git a/src/align/__init__.py b/src/align/__init__.py\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/src/align/detect_face.py b/src/align/detect_face.py\nindex 7f98ca7..8c0b61d 100644\n--- a/src/align/detect_face.py\n+++ b/src/align/detect_face.py\n@@ -82,7 +82,7 @@ class Network(object):\n         session: The current TensorFlow session\n         ignore_missing: If true, serialized weights for missing layers are ignored.\n         """\n-        data_dict = np.load(data_path, encoding=\'latin1\').item() #pylint: disable=no-member\n+        data_dict = np.load(data_path, encoding=\'latin1\', allow_pickle=True).item() #pylint: disable=no-member\n \n         for op_name in data_dict:\n             with tf.variable_scope(op_name, reuse=True):\ndiff --git a/src/face_rec_cam.py b/src/face_rec_cam.py\nindex cfbd4f4..dfe8b03 100644\n--- a/src/face_rec_cam.py\n+++ b/src/face_rec_cam.py\n@@ -5,6 +5,10 @@ from __future__ import print_function\n import tensorflow as tf\n from imutils.video import VideoStream\n \n+from flask import Flask\n+from flask_restful import Api, Resource\n+from datetime import  datetime,date\n+import requests\n \n import argparse\n import facenet\n@@ -19,6 +23,30 @@ import cv2\n import collections\n from sklearn.svm import SVC\n \n+list = []\n+\n+\n+def test(list,bestname):\n+    for i in list:\n+        if bestname == i:\n+            return False\n+    return True\n+\n+\n+def markAttendance(name):\n+    with open(\'Attendance.csv\',\'r+\') as f:\n+        myDataList = f.readlines()\n+        nameList = []\n+        for line in myDataList:\n+            entry = line.split(\',\')\n+            nameList.append(entry[0])\n+        if name not in nameList:\n+            now = datetime.now()\n+            dtString = now.strftime(\'%H:%M:%S\')\n+\n+            f.writelines(f\'\\n{name},{dtString}\')\n+\n+\n \n def main():\n     parser = argparse.ArgumentParser()\n@@ -95,16 +123,27 @@ def main():\n                                 feed_dict = {images_placeholder: scaled_reshape, phase_train_placeholder: False}\n                                 emb_array = sess.run(embeddings, feed_dict=feed_dict)\n \n-                                predictions = model.predict_proba(emb_array)\n+                                temp, predictions = model.predict_proba(emb_array)\n                                 best_class_indices = np.argmax(predictions, axis=1)\n                                 best_class_probabilities = predictions[\n                                     np.arange(len(best_class_indices)), best_class_indices]\n                                 best_name = class_names[best_class_indices[0]]\n-                                print("Name: {}, Probability: {}".format(best_name, best_class_probabilities))\n-\n-\n \n                                 if best_class_probabilities > 0.8:\n+                                    if test(list, best_name):\n+                                        list.append(best_name)\n+                                        now = datetime.now()\n+                                        today = datetime.today()\n+                                        day = str(today.day)\n+                                        month = str(today.month)\n+                                        year = str(today.year)\n+                                        toDAy = f\'{day}/{month}/{year}\'\n+                                        dtString = now.strftime(\'%H:%M:%S\')\n+                                        requests.post("http://127.0.0.1:5000/name",\n+                                                      json={\'name\': best_name,  \'day\': toDAy, \'time\': dtString})\n+\n+                                        print(list)\n+\n                                     cv2.rectangle(frame, (bb[i][0], bb[i][1]), (bb[i][2], bb[i][3]), (0, 255, 0), 2)\n                                     text_x = bb[i][0]\n                                     text_y = bb[i][3] + 20\n@@ -119,6 +158,9 @@ def main():\n                                 else:\n                                     name = "Unknown"\n \n+\n+\n+\n                 except:\n                     pass\n \n@@ -130,4 +172,4 @@ def main():\n             cv2.destroyAllWindows()\n \n \n-main()\n\\ No newline at end of file\n+main()\ndiff --git a/src/face_rec_flask.py b/src/face_rec_flask.py\nindex 16868f2..3168635 100644\n--- a/src/face_rec_flask.py\n+++ b/src/face_rec_flask.py\n@@ -2,9 +2,12 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-from flask import Flask\n+from flask import Flask,jsonify\n from flask import render_template , request\n from flask_cors import CORS, cross_origin\n+from datetime import  datetime,date\n+import requests\n+\n import tensorflow as tf\n import argparse\n import facenet\n@@ -24,8 +27,8 @@ THRESHOLD = [0.6, 0.7, 0.7]\n FACTOR = 0.709\n IMAGE_SIZE = 182\n INPUT_IMAGE_SIZE = 160\n-CLASSIFIER_PATH = \'../Models/facemodel.pkl\'\n-FACENET_MODEL_PATH = \'../Models/20180402-114759.pb\'\n+CLASSIFIER_PATH = \'Models/facemodel.pkl\'\n+FACENET_MODEL_PATH = \'Models/20180402-114759.pb\'\n \n # Load The Custom Classifier\n with open(CLASSIFIER_PATH, \'rb\') as file:\n@@ -47,38 +50,169 @@ images_placeholder = tf.get_default_graph().get_tensor_by_name("input:0")\n embeddings = tf.get_default_graph().get_tensor_by_name("embeddings:0")\n phase_train_placeholder = tf.get_default_graph().get_tensor_by_name("phase_train:0")\n embedding_size = embeddings.get_shape()[1]\n-pnet, rnet, onet = align.detect_face.create_mtcnn(sess, "align")\n+pnet, rnet, onet = align.detect_face.create_mtcnn(sess, "src/align")\n \n \n \n app = Flask(__name__)\n-CORS(app)\n \n+list = []\n+\n+list_name = []\n+\n+listOfsignup = []\n+\n+test64 = []\n+\n+db = [\n+    {\n+        \'ID\': \'VT1001\',\n+        \'password\': \'123456\'\n+    },\n+    {\n+        \'ID\': \'VT1002\',\n+        \'password\': \'1234567\'\n+    },\n+    {\n+        \'ID\': \'VT1003\',\n+        \'password\': \'123456789\'\n+    },\n+\n+]\n+\n+def checkdb(account,db):\n+    for i in db:\n+        if (account[\'ID\']==i[\'ID\']):\n+            return False\n+    return True\n+\n+def test(list,bestname):\n+    for i in list:\n+        if bestname == i:\n+            return False\n+    return True\n \n \n @app.route(\'/\')\n-@cross_origin()\n def index():\n     return "OK!";\n \n+@app.route(\'/recog\', methods=[\'GET\'])\n+def infor():\n+    return jsonify({\'data\': list})\n+\n+@app.route(\'/db\', methods=[\'GET\'])\n+def data():\n+    return jsonify({\'data\': db})\n+\n+@app.route(\'/signup\', methods=[\'POST\'])\n+def signuptoSV():\n+    if request.method == \'POST\':\n+        f = {\'Id\' : request.json[\'Id\'], \'Name\' : request.json[\'Name\'], \'Password\' : request.json[\'Password\'] }\n+        new_account = {\'ID\':request.json[\'Id\'],\'password\':request.json[\'Password\']}\n+        listOfsignup.append(f)\n+        if (checkdb(new_account,db)):\n+            db.append(new_account)\n+        else:\n+            return jsonify({\'result\':\'had\'})\n+        return jsonify({\'result\': \'ok\'})\n+\n+@app.route(\'/signup\', methods=[\'GET\'])\n+def viewSV():\n+    return jsonify({\'data\': listOfsignup})\n+\n+@app.route(\'/dayoff\', methods=[\'POST\'])\n+def dayoffToSV():\n+    if request.method == \'POST\':\n+        f = {\'Id\' : request.json[\'Id\'], \'Name\' : request.json[\'Name\'], \'Password\' : request.json[\'Password\'] }\n+        listOfsignup.append(f)\n+        return jsonify({\'result\': \'ok\'})\n+\n+@app.route(\'/test64\', methods=[\'GET\'])\n+def infor64():\n+    return jsonify({\'data\': test64})\n+\n+@app.route(\'/test64\', methods=[\'POST\'])\n+def test6base():\n+    if request.method == \'POST\':\n+        f = {\'base64\': request.json[\'base64\']}\n+        test64.append(f)\n+        return jsonify({\'result\': \'ok\'})\n+\n+\n+\n+@app.route(\'/signin\', methods=[\'POST\'])\n+def sign_in_account():\n+    if request.method == \'POST\':\n+        account = {"ID": request.json[\'ID\'],"password":request.json[\'password\']}\n+        for i in db:\n+            if account == i:\n+                return {\'result\':\'ok\'}\n+        return {\'result\': \'wrong\'}\n+db_ID = [\n+    {\n+        "ID": \'VT1001\',\n+        \'user\':\'LeDucLoc\'\n+    }\n+]\n+\n+\n+user = [\n+    {\n+        \'ID\':\'VT1001\',\n+        \'user\':\'Unknown\',\n+        \'time\':[]\n+    },\n+    {\n+        \'ID\':\'VT1002\',\n+        \'user\':\'LeDucLoc\',\n+        \'time\':[]\n+    },\n+    {\n+        \'ID\':\'VT1003\',\n+        \'user\':\'NguyenDuyVan\',\n+        \'time\':[]\n+    }\n+]\n+\n+def check_ID(ID):\n+    count =0\n+    for i in user:\n+        if ID == i[\'ID\']:\n+            return count\n+        count +=1\n+\n+@app.route(\'/gettime/<string:ID>\', methods=[\'GET\'])\n+def get_time(ID):\n+    key = check_ID(ID)\n+    return jsonify({\'data\': user[key]})\n+\n+\n @app.route(\'/recog\', methods=[\'POST\'])\n-@cross_origin()\n def upload_img_file():\n     if request.method == \'POST\':\n         # base 64\n-        name="Unknown"\n-        f = request.form.get(\'image\')\n-        w = int(request.form.get(\'w\'))\n-        h = int(request.form.get(\'h\'))\n-\n-        decoded_string = base64.b64decode(f)\n-        frame = np.fromstring(decoded_string, dtype=np.uint8)\n-        #frame = frame.reshape(w,h,3)\n-        frame = cv2.imdecode(frame, cv2.IMREAD_ANYCOLOR)  # cv2.IMREAD_COLOR in OpenCV 3.1\n+        name = "Unknown"\n+        toDay = \'\'\n+        dtString= \'\'\n+        now = datetime.now()\n+        today = datetime.today()\n+        day = str(today.day)\n+        month = str(today.month)\n+        year = str(today.year)\n+        toDAy = f\'{day}/{month}/{year}\'\n+        dtString = now.strftime(\'%H:%M\')\n+        f =  request.data\n+        time = \'123\'\n+        frame = base64.b64decode(f)\n+        frame = np.frombuffer(frame,dtype=np.uint8)\n+        # frame = frame.reshape(w,h,3)\n+        frame = cv2.imdecode(frame, cv2.IMREAD_COLOR)  # cv2.IMREAD_COLOR in OpenCV 3.1\n \n         bounding_boxes, _ = align.detect_face.detect_face(frame, MINSIZE, pnet, rnet, onet, THRESHOLD, FACTOR)\n \n         faces_found = bounding_boxes.shape[0]\n+        print(faces_found)\n \n         if faces_found > 0:\n             det = bounding_boxes[:, 0:4]\n@@ -89,7 +223,7 @@ def upload_img_file():\n                 bb[i][2] = det[i][2]\n                 bb[i][3] = det[i][3]\n                 cropped = frame\n-                #cropped = frame[bb[i][1]:bb[i][3], bb[i][0]:bb[i][2], :]\n+                # cropped = frame[bb[i][1]:bb[i][3], bb[i][0]:bb[i][2], :]\n                 scaled = cv2.resize(cropped, (INPUT_IMAGE_SIZE, INPUT_IMAGE_SIZE),\n                                     interpolation=cv2.INTER_CUBIC)\n                 scaled = facenet.prewhiten(scaled)\n@@ -102,16 +236,28 @@ def upload_img_file():\n                     np.arange(len(best_class_indices)), best_class_indices]\n                 best_name = class_names[best_class_indices[0]]\n                 print("Name: {}, Probability: {}".format(best_name, best_class_probabilities))\n-\n+                print(best_class_probabilities)\n                 if best_class_probabilities > 0.8:\n                     name = class_names[best_class_indices[0]]\n                 else:\n                     name = "Unknown"\n+            print(predictions)\n+            print(\'done\')\n+            list_name.append(name)\n+            list.append({\'name\': name, \'time\': time, \'key\': len(list_name)})\n+            for i in user:\n+                if i[\'user\'] == name:\n+                    i[\'time\'].append(time)\n+            return jsonify({\'result\': \'ok\', \'name\': name,\'time\': time, \'key\': len(list_name)})\n+        else:\n+            list.append({\'name\': name, \'time\': time, \'key\': len(list_name)})\n+            for i in user:\n+                if i[\'user\'] == name:\n+                    i[\'time\'].append(time)\n+            return jsonify({\'result\': \'none\', \'name\': name,\'time\': time, \'key\': len(list_name)})\n \n \n-        return name;\n-\n \n if __name__ == \'__main__\':\n-    app.run(debug=True, host=\'0.0.0.0\',port=\'8000\')\n+    app.run(debug=True, port=5000)\n \ndiff --git a/src/test.py b/src/test.py\nnew file mode 100644\nindex 0000000..853737b\n--- /dev/null\n+++ b/src/test.py\n@@ -0,0 +1,14 @@\n+from datetime import datetime, date\n+now = datetime.now()\n+today= date.today()\n+today = datetime.today()\n+day = str(today.day)\n+month = str(today.month)\n+year = str(today.year)\n+toDAy = f\'{day}/{month}/{year}\'\n+print(type(toDAy))\n+\n+dtString = now.strftime(\'%H:%M:%S\')\n+\n+print(type(dtString))\n+\ndiff --git a/src/test_signin.py b/src/test_signin.py\nnew file mode 100644\nindex 0000000..c433b0d\n--- /dev/null\n+++ b/src/test_signin.py\n@@ -0,0 +1,20 @@\n+db = [\n+    {\n+        \'ID\': \'VT1001\',\n+        \'password\': \'123456\'\n+    },\n+    {\n+        \'ID\': \'VT1002\',\n+        \'password\': \'1234567\'\n+    },\n+    {\n+        \'ID\': \'VT1003\',\n+        \'password\': \'123456789\'\n+    },\n+\n+]\n+\n+account = {"ID": \'VT1002\',"password":\'1234567\'}\n+for i in db:\n+    if i == account:\n+        print(True)\n\\ No newline at end of file'